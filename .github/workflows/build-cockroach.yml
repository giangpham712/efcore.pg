name: Build Cockroach

on:
  push:
    branches:
      - cockroach
    tags:
      - v*
  pull_request:
  workflow_dispatch:

env:
  dotnet_sdk_version: '8.0.100-preview.2.23153.6'
  postgis_version: 3
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
        crdb_major: [ v23.1 ]
        config: [ Release ]
        # include:
        #  - os: ubuntu-22.04
        #    crdb_major: v23.1.3
        #    config: Debug
    outputs:
      is_release: ${{ steps.analyze_tag.outputs.is_release }}
      is_prerelease: ${{ steps.analyze_tag.outputs.is_prerelease }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.dotnet_sdk_version }}

      - name: Build
        run: dotnet build --configuration Debug
        shell: bash

      - name: Start CockroachDB ${{ matrix.crdb_major }} (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          # First uninstall any cockroachDB installed on the image
          sudo rm -f /usr/local/bin/cockroach
          # Install CRDB

          if [[ ${{ matrix.crdb_major }} == "master" ]]; then
            wget --no-verbose -O cockroach  https://edge-binaries.cockroachdb.com/cockroach/cockroach.linux-gnu-amd64.LATEST
            chmod u+x cockroach
            sudo mv ./cockroach /usr/local/bin/cockroach
          elif [[ ${{ matrix.crdb_major }} == "v23.1" ]]; then
            wget --no-verbose -O cockroach  https://edge-binaries.cockroachdb.com/cockroach/cockroach.linux-gnu-amd64.release-23.1
            chmod u+x cockroach
            sudo mv ./cockroach /usr/local/bin/cockroach
          else
            curl https://binaries.cockroachdb.com/cockroach-v23.1.3.linux-amd64.tgz | tar -xz && sudo cp -i cockroach-v23.1.3.linux-amd64/cockroach /usr/local/bin/
            sudo mkdir -p /usr/local/lib/cockroach
            sudo cp -i cockroach-v23.1.3.linux-amd64/lib/libgeos.so /usr/local/lib/cockroach/
            sudo cp -i cockroach-v23.1.3.linux-amd64/lib/libgeos_c.so /usr/local/lib/cockroach/
          fi

          which cockroach
          cockroach version
          # Create certificates
          rm -rf cockroach-data
          cockroach cert create-ca --certs-dir=certs --ca-key=certs/ca.key
          cockroach cert create-client --certs-dir=certs --ca-key=certs/ca.key root
          cockroach cert create-node --certs-dir=certs --ca-key=certs/ca.key 127.0.0.1 127.0.0.1
          # Start the initialization
          cockroach start-single-node --certs-dir=certs --advertise-addr=127.0.0.1:26257 --background
          cockroach sql --certs-dir=certs -e "CREATE USER crdb_tests WITH PASSWORD 'crdb_tests'; GRANT admin TO crdb_tests" --url="postgresql://root@127.0.0.1:26257/defaultdb?sslcert=certs%2Fclient.root.crt&sslkey=certs%2Fclient.root.key&sslmode=verify-full&sslrootcert=certs%2Fca.crt"

      - name: Test
        run: TEST_COCKROACH_DB=true dotnet test -c ${{ matrix.config }} --blame-hang-timeout 600000 --blame-hang-dump-type mini --logger "GitHubActions;report-warnings=false"
        shell: bash

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: results
          retention-days: 1
          path: test/EFCore.PG.FunctionalTests/TestResults/**/*

      - id: analyze_tag
        name: Analyze tag
        shell: bash
        run: |
          if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              echo "Release tag detected"
              echo "::set-output name=is_release::true"
              if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+.*- ]]; then
                  echo "Prerelease tag detected"
                  echo "::set-output name=is_prerelease::true"
              fi
          fi

  publish-ci:
    needs: build
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && startsWith(github.repository, 'npgsql/')
    environment: myget

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.dotnet_sdk_version }}

      - name: Pack
        run: dotnet pack --configuration Release --property:PackageOutputPath="$PWD/nupkgs" --version-suffix "ci.$(date -u +%Y%m%dT%H%M%S)+sha.${GITHUB_SHA:0:9}" -p:ContinuousIntegrationBuild=true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: EFCore.PG.CI
          path: nupkgs

      - name: Publish packages to MyGet (vnext)
        if: startsWith(github.ref, 'refs/heads/') && startsWith(github.ref, 'refs/heads/hotfix/') == false
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.MYGET_FEED_TOKEN }} --source https://www.myget.org/F/npgsql-vnext/api/v3/index.json
        working-directory: nupkgs

      - name: Publish packages to MyGet (patch)
        if: startsWith(github.ref, 'refs/heads/hotfix/')
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.MYGET_FEED_TOKEN }} --source https://www.myget.org/F/npgsql/api/v3/index.json
        working-directory: nupkgs

  release:
    needs: build
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && startsWith(github.repository, 'npgsql/') && needs.build.outputs.is_release == 'true'
    environment: nuget.org

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.dotnet_sdk_version }}

      - name: Pack
        run: dotnet pack --configuration Release --property:PackageOutputPath="$PWD/nupkgs" -p:ContinuousIntegrationBuild=true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: EFCore.PG.Release
          path: nupkgs

      # TODO: Create a release

      - name: Publish to nuget.org
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.NUGET_ORG_API_KEY }} --source https://api.nuget.org/v3/index.json
        working-directory: nupkgs
